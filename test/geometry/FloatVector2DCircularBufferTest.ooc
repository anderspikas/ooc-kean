/* This file is part of magic-sdk, an sdk for the open source programming language magic.
 *
 * Copyright (C) 2016-2017 magic-lang
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */

use geometry
use unit

FloatVector2DCircularBufferTest: class extends Fixture {
	init: func {
		super("FloatVector2DCircularBufferTest")
		tolerance := 0.0001f
		this add("sum and mean", func {
			list := FloatVector2DCircularBuffer new(4)
			list add(FloatVector2D new(10.0f, -11.0f))
			list add(FloatVector2D new(10.0f, -11.0f))
			list add(FloatVector2D new(1.0f, 2.0f))
			list add(FloatVector2D new(3.0f, 2.0f))
			list add(FloatVector2D new(5.0f, -2.0f))
			list add(FloatVector2D new(7.0f, -1.0f))
			sum := list sum
			mean := list mean
			expect(sum x, is equal to(16.0f) within(tolerance))
			expect(sum y, is equal to(1.0f) within(tolerance))
			expect(mean x, is equal to(4.0f) within(tolerance))
			expect(mean y, is equal to(0.25f) within(tolerance))
			list free()
		})
		this add("non-full sum and mean", func {
			list := FloatVector2DCircularBuffer new(10)
			list add(FloatVector2D new(1.0f, 2.0f))
			list add(FloatVector2D new(3.0f, 2.0f))
			list add(FloatVector2D new(5.0f, -2.0f))
			list add(FloatVector2D new(7.0f, -1.0f))
			sum := list sum
			mean := list mean
			expect(sum x, is equal to(16.0f) within(tolerance))
			expect(sum y, is equal to(1.0f) within(tolerance))
			expect(mean x, is equal to(4.0f) within(tolerance))
			expect(mean y, is equal to(0.25f) within(tolerance))
			list free()
		})
		this add("fill, count and reset", func {
			list := FloatVector2DCircularBuffer new(4)
			expect(list isFilled, is false)
			expect(list count, is equal to(0))
			list add(FloatVector2D new(1.0f, 2.0f))
			list add(FloatVector2D new(3.0f, 2.0f))
			expect(list isFilled, is false)
			expect(list count, is equal to(2))
			list add(FloatVector2D new(5.0f, -2.0f))
			list add(FloatVector2D new(7.0f, -1.0f))
			expect(list isFilled, is true)
			expect(list count, is equal to(4))
			list add(FloatVector2D new(9.0f, -3.0f))
			list add(FloatVector2D new(0.0f, -2.0f))
			expect(list isFilled, is true)
			expect(list count, is equal to(4))
			list reset()
			expect(list isFilled, is false)
			expect(list count, is equal to(0))
			list add(FloatVector2D new(1.0f, 2.0f))
			list add(FloatVector2D new(3.0f, 2.0f))
			expect(list isFilled, is false)
			expect(list count, is equal to(2))
			list free()
		})
		this add("variance and stdev", func {
			list := FloatVector2DCircularBuffer new(3)
			expect(list variance isNumber, is false)
			expect(list stdev isNumber, is false)
			list add(FloatVector2D new(1.0f, 2.0f))
			expect(list variance, is equal to(0.0f) within(tolerance))
			list add(FloatVector2D new(3.0f, 2.0f))
			list add(FloatVector2D new(5.0f, -2.0f))
			list add(FloatVector2D new(7.0f, 3.0f))
			expect(list variance, is equal to(7.333333f) within(tolerance))
			expect(list stdev, is equal to(2.708013f) within(tolerance))
			list free()
		})
		this add("covariance, correlation, linregSlope", func {
			list1 := FloatVector2DCircularBuffer new(10)
			list2 := FloatVector2DCircularBuffer new(5)
			expect(list1 covariance(list2) isNumber, is false)
			expect(list1 correlation(list2) isNumber, is false)
			expect(list1 linregSlope(list2) isNumber, is false)
			list1 add(FloatVector2D new(-3.0f, 0.0f))
			list1 add(FloatVector2D new(-1.0f, 3.0f))
			list1 add(FloatVector2D new(2.0f, -2.0f))
			list1 add(FloatVector2D new(6.0f, 3.0f))
			list2 add(FloatVector2D new(-2.0f, -4.0f))
			list2 add(FloatVector2D new(-3.0f, -2.0f))
			list2 add(FloatVector2D new(4.0f, -1.0f))
			list2 add(FloatVector2D new(1.0f, 7.0f))
			expect(list1 covariance(list2), is equal to(10.0f) within(tolerance))
			expect(list2 covariance(list1), is equal to(10.0f) within(tolerance))
			expect(list1 covariance(list1) - list1 variance, is equal to(0.0f) within(tolerance))
			expect(list1 correlation(list2), is equal to(0.5f) within(tolerance))
			expect(list2 correlation(list1), is equal to(0.5f) within(tolerance))
			expect(list1 linregSlope(list2), is equal to(0.4f) within(tolerance))
			expect(list2 linregSlope(list1), is equal to(0.625f) within(tolerance))
			(list1, list2) free()
		})
		this add("FloatVector2DCircularBufferPair fill, count", func {
			pair := FloatVector2DCircularBufferPair new(4)
			expect(pair isFilled, is false)
			expect(pair count, is equal to(0))
			pair add(FloatVector2D new(-3.0f, 0.0f), FloatVector2D new(-2.0f, -4.0f))
			pair add(FloatVector2D new(-1.0f, 3.0f), FloatVector2D new(-3.0f, -2.0f))
			expect(pair isFilled, is false)
			expect(pair count, is equal to(2))
			pair add(FloatVector2D new(2.0f, -2.0f), FloatVector2D new(4.0f, -1.0f))
			pair add(FloatVector2D new(6.0f, 3.0f), FloatVector2D new(1.0f, 7.0f))
			expect(pair isFilled, is true)
			expect(pair count, is equal to(4))
			pair add(FloatVector2D new(-3.0f, 0.0f), FloatVector2D new(-2.0f, -4.0f))
			pair add(FloatVector2D new(-1.0f, 3.0f), FloatVector2D new(-3.0f, -2.0f))
			expect(pair isFilled, is true)
			expect(pair count, is equal to(4))
			pair free()
		})
		this add("FloatVector2DCircularBufferPair reset", func {
			pair := FloatVector2DCircularBufferPair new(2)
			pair add(FloatVector2D new(-3.0f, 0.0f), FloatVector2D new(-2.0f, -4.0f))
			pair add(FloatVector2D new(-1.0f, 3.0f), FloatVector2D new(-3.0f, -2.0f))
			pair add(FloatVector2D new(6.0f, 3.0f), FloatVector2D new(1.0f, 7.0f))
			pair reset()
			expect(pair isFilled, is false)
			expect(pair count, is equal to(0))
			expect(pair first mean norm isNumber, is false)
			expect(pair first sum norm, is equal to(0.0f))
			expect(pair second mean norm isNumber, is false)
			expect(pair second sum norm, is equal to(0.0f))
			expect(pair covariance isNumber, is false)
			pair free()
		})
		this add("FloatVector2DCircularBufferPair measures", func {
			pair := FloatVector2DCircularBufferPair new(5)
			expect(pair covariance isNumber, is false)
			expect(pair correlation isNumber, is false)
			pair add(FloatVector2D new(-3.0f, 0.0f), FloatVector2D new(-2.0f, -4.0f))
			pair add(FloatVector2D new(-1.0f, 3.0f), FloatVector2D new(-3.0f, -2.0f))
			pair add(FloatVector2D new(2.0f, -2.0f), FloatVector2D new(4.0f, -1.0f))
			pair add(FloatVector2D new(6.0f, 3.0f), FloatVector2D new(1.0f, 7.0f))
			expect(pair covariance, is equal to(10.0f) within(tolerance))
			expect(pair correlation, is equal to(0.5f) within(tolerance))
			expect(pair linregSlope, is equal to(0.4f) within(tolerance))
			expect(pair linregSlopeInv, is equal to(0.625f) within(tolerance))
			pair free()
		})
	}
}

FloatVector2DCircularBufferTest new() run() . free()
